{
	"info": {
		"_postman_id": "4a8cef41-e4d9-4a44-aadf-8587c0312021",
		"name": "Actor-Movie Tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "18901686"
	},
	"item": [
		{
			"name": "Add an actor",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var data = pm.response.json()\r",
							"pm.globals.set(\"actorId\", data.id);\r",
							"\r",
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\":\"Leonardo DiCaprio\",\r\n    \"photo\":\"https://upload.wikimedia.org/wikipedia/commons/thumb/2/25/Leonardo_DiCaprio_2014.jpg/220px-Leonardo_DiCaprio_2014.jpg\",\r\n    \"nationality\":\"United States\",\r\n    \"birthDate\":\"1974-11-11T00:00:00.000Z\",\r\n    \"biography\":\"Leonardo Wilhelm DiCaprio is an American actor and film producer. Known for his work as a leading man in biopics and period films, he is the recipient of numerous accolades, including an Academy Award, a British Academy Film Award, and three Golden Globe Awards\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/actors",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"actors"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add a genre",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var data = pm.response.json()\r",
							"pm.globals.set(\"genreId\", data.id);\r",
							"\r",
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"type\":\"Drama\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/genres",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"genres"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add a director",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var data = pm.response.json()\r",
							"pm.globals.set(\"directorId\", data.id);\r",
							"\r",
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\":\"Quentin Tarantino\",\r\n    \"photo\":\"https://upload.wikimedia.org/wikipedia/commons/thumb/0/0b/Quentin_Tarantino_by_Gage_Skidmore.jpg/220px-Quentin_Tarantino_by_Gage_Skidmore.jpg\",\r\n    \"nationality\":\"United States\",\r\n    \"birthDate\":\"1963-03-27T00:00:00.000Z\",\r\n    \"biography\":\"Quentin Jerome Tarantino is an American filmmaker and actor. His films are characterized by frequent references to popular culture and film genres, nonlinear storylines, dark humor, stylized violence, extended dialogue, pervasive use of profanity, cameos and ensemble casts.\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/directors",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"directors"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add a youtube trailer",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var data = pm.response.json()\r",
							"pm.globals.set(\"youtubeTrailerId\", data.id);\r",
							"\r",
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\":\"ONCE UPON A TIME IN HOLLYWOOD - Official Trailer (HD)\",\r\n    \"url\":\"https://www.youtube.com/watch?v=ELeMaP8EPAA\",\r\n    \"duration\":3,\r\n    \"channel\":\"Sony Pictures Entertainment\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/youtube-trailers",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"youtube-trailers"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add a youtube trailer 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var data = pm.response.json()\r",
							"pm.globals.set(\"youtubeTrailerId2\", data.id);\r",
							"\r",
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\":\"Reservoir Dogs (1992) Official Trailer #1 - Quentin Tarantino Movie\",\r\n    \"url\":\"https://www.youtube.com/watch?v=vayksn4Y93A\",\r\n    \"duration\":2,\r\n    \"channel\":\"Rotten Tomatoes Classic Trailers\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/youtube-trailers",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"youtube-trailers"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add a movie",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var data = pm.response.json()\r",
							"pm.globals.set(\"movieId\", data.id);\r",
							"\r",
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"title\":\"Once Upon a Time in Hollywood\",\r\n    \"poster\":\"https://upload.wikimedia.org/wikipedia/en/thumb/a/a6/Once_Upon_a_Time_in_Hollywood_poster.png/220px-Once_Upon_a_Time_in_Hollywood_poster.png\",\r\n    \"duration\":161,\r\n    \"country\":\"United States\",\r\n    \"releaseDate\":\"2019-07-26T00:00:00.000Z\",\r\n    \"popularity\":85,\r\n    \"genre\": { \"id\": \"{{genreId}}\" },\r\n    \"director\": { \"id\": \"{{directorId}}\" },\r\n    \"youtubeTrailer\": { \"id\": \"{{youtubeTrailerId}}\" }\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/movies",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"movies"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add a movie 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var data = pm.response.json()\r",
							"pm.globals.set(\"movieId2\", data.id);\r",
							"\r",
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"title\":\"Reservoir Dogs\",\r\n    \"poster\":\"https://es.web.img3.acsta.net/pictures/21/05/25/13/54/5939417.jpg\",\r\n    \"duration\":99,\r\n    \"country\":\"United States\",\r\n    \"releaseDate\":\"1992-10-08T00:00:00.000Z\",\r\n    \"popularity\":90,\r\n    \"genre\": { \"id\": \"{{genreId}}\" },\r\n    \"director\": { \"id\": \"{{directorId}}\" },\r\n    \"youtubeTrailer\": { \"id\": \"{{youtubeTrailerId2}}\" }\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/movies",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"movies"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add a movie to an actor",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/actors/{{actorId}}/movies/{{movieId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"actors",
						"{{actorId}}",
						"movies",
						"{{movieId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add an invalid movie to an actor",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"Get expected error message\", function () {\r",
							"    var data = pm.response.json();\r",
							"    pm.expect(data.message).to.eql(\"The movie with the given id was not found\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/actors/{{actorId}}/movies/00000000-0000-0000-0000-000000000000",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"actors",
						"{{actorId}}",
						"movies",
						"00000000-0000-0000-0000-000000000000"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add a movie to an invalid actor",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"Get expected error message\", function () {\r",
							"    var data = pm.response.json();\r",
							"    pm.expect(data.message).to.eql(\"The actor with the given id was not found\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/actors/00000000-0000-0000-0000-000000000000/movies/{{movieId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"actors",
						"00000000-0000-0000-0000-000000000000",
						"movies",
						"{{movieId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get all movies from an actor",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Number of movies > ' + 0, function () {\r",
							"    var data = pm.response.json()\r",
							"    pm.expect(data.length).to.greaterThan(0)\r",
							"});\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/actors/{{actorId}}/movies",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"actors",
						"{{actorId}}",
						"movies"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get all movies from an invalid actor",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"Get expected error message\", function () {\r",
							"    var data = pm.response.json();\r",
							"    pm.expect(data.message).to.eql(\"The actor with the given id was not found\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/actors/00000000-0000-0000-0000-000000000000/movies",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"actors",
						"00000000-0000-0000-0000-000000000000",
						"movies"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get a movie from an actor",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/actors/{{actorId}}/movies/{{movieId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"actors",
						"{{actorId}}",
						"movies",
						"{{movieId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get an invalid movie from an actor",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"Get expected error message\", function () {\r",
							"    var data = pm.response.json();\r",
							"    pm.expect(data.message).to.eql(\"The movie with the given id was not found\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/actors/{{actorId}}/movies/00000000-0000-0000-0000-000000000000",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"actors",
						"{{actorId}}",
						"movies",
						"00000000-0000-0000-0000-000000000000"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get a movie from an invalid platform",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"Get expected error message\", function () {\r",
							"    var data = pm.response.json();\r",
							"    pm.expect(data.message).to.eql(\"The actor with the given id was not found\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/actors/00000000-0000-0000-0000-000000000000/movies/{{movieId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"actors",
						"00000000-0000-0000-0000-000000000000",
						"movies",
						"{{movieId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get a movie non-associated to an actor",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 412\", function () {\r",
							"    pm.response.to.have.status(412);\r",
							"});\r",
							"\r",
							"pm.test(\"Get expected error message\", function () {\r",
							"    var data = pm.response.json();\r",
							"    pm.expect(data.message).to.eql(\"The movie with the given id is not associated to the actor\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/actors/{{actorId}}/movies/{{movieId2}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"actors",
						"{{actorId}}",
						"movies",
						"{{movieId2}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update movies of an actor",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "[\r\n    { \"id\": \"{{movieId2}}\" }\r\n]",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/actors/{{actorId}}/movies",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"actors",
						"{{actorId}}",
						"movies"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update invalid movies of an actor",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"Get expected error message\", function () {\r",
							"    var data = pm.response.json();\r",
							"    pm.expect(data.message).to.eql(\"The movie with the given id was not found\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "[\r\n    { \"id\": \"00000000-0000-0000-0000-000000000000\" }\r\n]",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/actors/{{actorId}}/movies",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"actors",
						"{{actorId}}",
						"movies"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update movies of an invalid actor",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"Get expected error message\", function () {\r",
							"    var data = pm.response.json();\r",
							"    pm.expect(data.message).to.eql(\"The actor with the given id was not found\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "[\r\n    { \"id\": \"{{movieId2}}\" }\r\n]",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/actors/00000000-0000-0000-0000-000000000000/movies",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"actors",
						"00000000-0000-0000-0000-000000000000",
						"movies"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete a movie 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 204\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/movies/{{movieId2}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"movies",
						"{{movieId2}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete a movie",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 204\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/movies/{{movieId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"movies",
						"{{movieId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete a youtube trailer 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 204\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/youtube-trailers/{{youtubeTrailerId2}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"youtube-trailers",
						"{{youtubeTrailerId2}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete a youtube trailer",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 204\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/youtube-trailers/{{youtubeTrailerId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"youtube-trailers",
						"{{youtubeTrailerId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete a director",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 204\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/directors/{{directorId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"directors",
						"{{directorId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete a genre",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 204\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/genres/{{genreId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"genres",
						"{{genreId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete an actor",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 204\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/actors/{{actorId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"actors",
						"{{actorId}}"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:3000/api/v1",
			"type": "string"
		}
	]
}